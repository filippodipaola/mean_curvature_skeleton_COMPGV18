cmake_minimum_required(VERSION 3.9)
set(CMAKE_CXX_STANDARD 11)
set_property(GLOBAL PROPERTY ALLOW_DUPLICATE_CUSTOM_TARGETS 1)
SET( CMAKE_EXE_LINKER_FLAGS -lglfw)

project(Mean_Curvature_Skeletons)

set(QHULL_LIB_DIR /home/osboxes/GV18/libigl/tutorial/GV18_3/qhull/lib)

include_directories(libqhullcpp)


# nanogui
# Disable building extras we won't need (pure C++ project)
#set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
#set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
#set(NANOGUI_INSTALL OFF CACHE BOOL " " FORCE)
#set(NANOGUI_BUILD_SHARED OFF CACHE BOOL " " FORCE)

#add_subdirectory("../../../../external/nanogui" "${CMAKE_CURRENT_BINARY_DIR}/nanogui_build")
#include_directories(/home/osboxes/GV18/libigl/external/nanogui/)
#include_directories(/home/osboxes/GV18/libigl/external/nanogui/include)
#set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# For reliability of parallel build, make the NanoGUI targets dependencies
#set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

#Various preprocessor definitions have been generated by NanoGUI
#add_definitions(${NANOGUI_EXTRA_DEFS})
# On top of adding the path to nanogui/include, you may need extras
#include_directories(${NANOGUI_EXTRA_INCS})

#add_definitions(-DIGL_VIEWER_WITH_NANOGUI)


add_executable(${PROJECT_NAME}_bin main.cpp)

target_link_libraries(${PROJECT_NAME}_bin igl::core igl::viewer tutorials nanogui ${QHULL_LIB_DIR}/libqhullcpp.a ${QHULL_LIB_DIR}/libqhullstatic_r.a ${QHULL_LIB_DIR}/libqhullstatic.a ${QHULL_LIB_DIR}/libqhull_r.so)

